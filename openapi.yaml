openapi: 3.0.3
info:
  title: Hoodie or T-Shirts
  description: |-
   Реализую свой магазин по продаже Худи и футболок
   <img src = "https://i.yapx.ru/V9aDi.jpg" alt="Лого">
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1
    description: Dev server  

paths:
  /clothes:
    get:
      summary: Метод получения списка одежды всех категорий
      tags:
        - Clothes
      operationId: getAllСlothes
      responses:
        '200':
          description: Успешный ответ со списком одежды
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clothes"
        'default':
         description: Всё нестандартное
         content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Метод создания новой одежды в каталог
      operationId: createClothesCategory
      tags:
        - Clothes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cloth"
      responses:
        '200':
          description: Успешный ответ с созданием одежды определённой категории
          content:
            application:
              schema:
                $ref: "#/components/schemas/Cloth"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"            
  /clothes/{nameCategory}:
    get:
      summary: Метод получения списка одежды определённой категории
      tags:
        - Clothes
      parameters:
        - name: nameCategory
          in: path
          required: true
          description: Название категории
          example: Hoodie
          schema:
            type: string
      operationId: getAllСlothesCategory
      responses:
        '200':
          description: Успешный ответ со списком одежды
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clothes"
        'default':
         description: Всё нестандартное
         content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /clothes/{cloth_id}:
    get:
      summary: Метод получения одежды по идентификатору
      tags:
        - Clothes
      operationId: getclothById
      parameters:
          - name: cloth_id
            in: path
            required: true
            description: Идентификатор одежды
            example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
            schema:
              type: string
              format: uuid
      responses:
        '200':
          description: Успешный ответ с получение id одного объекта
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cloth"
        'default':
         description: Всё нестандартное
         content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Метод удаления одежды по идентификатору
      operationId: deleteClothById
      tags:
        - Clothes
      parameters:
        - name: cloth_id
          in: path
          required: true
          description: Идентификатор одежды
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное удаление
          content: {}
    put:
        summary: Метод обновления одежды в каталоге
        operationId: updateCloth
        tags:
          - Clothes
        parameters:
          - name: cloth_id
            in: path
            required: true
            description: Идентификатор одежды
            example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cloth"
        responses:
          '200':
            description: Подтверждение успешного обновления
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Cloth"
  /clothes/color/{color}:
    get:
      summary: Метод получения одежды по палитре цветов      
      operationId: getClothByColor
      tags:
        - Clothes
      parameters:
        - name: color
          in: path
          required: true
          description: Цвет одежды
          schema:
            $ref: "#/components/schemas/AllColors"
      responses:
        '200':
          description: Одежда
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cloth"
  /clothes/size/{size}:
    get:
      summary: Метод получения одежды по размеру     
      operationId: getClothBySize
      tags:
        - Clothes
      parameters:
        - name: size
          in: path
          required: true
          description: Размер одежды
          schema:
            $ref: "#/components/schemas/AllSize"
      responses:
        '200':
          description: Одежда
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cloth"
  /user:
    post:
      tags:
        - User
      summary: Создание нового пользователя
      operationId: createUser
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      responses:
        '200':
          description: Успешный ответ с созданием пользователя
          content:
            application:
              schema:
                $ref: "#/components/schemas/User"
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Error"
  /user/{username}:
    get:
      tags:
        - User
      summary: Метод получения пользователя по имени пользователя
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'Имя, которое необходимо извлечь'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Error"  
    delete:
      tags:
        - User
      summary: Удаление пользователя
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Имя, которое необходимо удалить
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешное удаление пользователя
          content: {}
        '400':
          description: Предоставлено неверное имя пользователя
        '404':
          description: Пользователь не найлен
      
  /order:
    post:
      tags:
        - Order
      summary: Метод заказа одежды
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Операция заказа прошла успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Error"  
  /orders/{order_id}:
    get:
      tags:
        - Order
      summary: Получение информации о заказа
      operationId: getOrderById
      parameters:
        - name: order_id
          in: path
          description: Идентификатор заказа, который необходимо получить
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'          
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Error"  
    delete:
      tags:
        - Order
      summary: Удалить заказ по идентификатору
      operationId: deleteOrder
      parameters:
        - name: order_id
          in: path
          description: Идентификатор заказа, который необходимо удалить
          required: true
          schema:
           type: string
      responses:
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Error"  
    put:
      tags:
        - Order
      summary: Обновление существующего заказа
      description: Обновление существующего заказа по идентификатору
      operationId: updateOrder
      parameters:
        - name: order_id
          in: path
          description: Идентификатор заказа, который необходимо обновить
          required: true
          schema:
            type: string
      requestBody:
        description: Обновление существующего заказа
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'          
        'default':
          description: Всё нестандартное
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Error"  
               
  /order/{order_id}/status:
    patch:
      tags:
        - Order
      summary: Обновление статуса заказа
      description: Обновление статуса заказа по идентификатору
      operationId: updateCountProduct
      parameters:
        - name: order_id
          in: path
          description: Идентификатор товара, статус которого нужно обновить
          required: true
          schema:
            type: string

        - name: orderStatus
          in: query
          description: Новый статус заказа
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешное выполнение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '404':
          description: Заказ не найден
        '405':
          description: Были переданы некорректные данные             

 
components:
  schemas:
    AllSize:
      type: string
      enum:
        - XS
        - S
        - M
        - L
        - XL
        - XXL
      description: Размер футболки
    AllColor:
      type: object
      description: Палитра цветов
      properties:
        name:
          type: string
          description: Название цвета
        code:
          type: string
          format: color
          description: Код цвета в формате HEX, RGB или HSL
        image:
          type: string
          format: uri
          description: URL-адрес изображения с примером цвета
      required:
        - name
        - code
        
    AllColors:
      type: array
      items:
        $ref: "#/components/schemas/AllColor"
          
    Cloth:
      type: object
      required:
        - cloth_id
        - nameSeriesCloth
        - sizeCloth
        - colorPalleteCloth
        - categoryCloth
        - countCloth
      properties:
        cloth_id:
          type: string
          readOnly: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          format: uuid
          description: id одежды
        nameSeriesCloth:
          type: string
          example: Model series "Blue Sky"
          description: Имя серии выпуска продукта футболки
        brandCloth:
          type: string
          example: abbibas
          description: Имя бренда футболки
        sizeCloth:
          $ref: "#/components/schemas/AllSize"
        colorPalleteCloth:
          $ref: "#/components/schemas/AllColors"
        priceCloth:
          type: integer
          example: 2000
          description: Цена футболки
        countCloth:
          type: integer
          format: int64
          example: 10
          description: Колличество футболок
        categoryCloth:
          type: string
          enum: 
            - Hoodie
            - Shirt
        createdCloth:
          type: string
          format: 2022-07-01T15:00:00+01
          
          
    Clothes:
      type: array
      items:
        $ref: "#/components/schemas/Cloth"
        
    User:
      type: object
      required:
        - username
        - firstName
        - lastName
        - password
        - email
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
        username:
          type: string
          example: goodpromised
        firstName:
          type: string
          example: Денис
        lastName:
          type: string
          example: Денис
        email:
          type: string
          format: email
          example: denis_denis@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: string
          enum:
            - online
            - offline
          description: User Status
          example: online
          
    Order:
      type: object
      required:
        - customer
        - items
        - total_price
        - status
      properties:
        order_id:
          type: string
          format: uuid
          readOnly: true
          description: Уникальный идентификатор заказа
        shipDate:
          type: string
          format: date-time
        customer:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Уникальный идентификатор покупателя
            name:
              type: string
              example: Денис
              description: Имя покупателя
            email:
              type: string
              format: email
              example: denis_denis@email.com
              description: Электронная почта покупателя
        items:
          type: array
          description: Список товаров в заказе
          items:
            type: object
            properties:
              object_id:
                type: string
                format: uuid
                example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
              name_object:
                type: string
                example: T-Shirt Model series "Summer day"
                description: Название товара
              price:
                type: number
                format: float
                example: 2000
                description: Цена товара
              quantity:
                type: integer
                example: 2
                description: Количество товара
        total_price:
          type: number
          format: float
          example: 4000
          description: Общая стоимость заказа
        status:
          type: string
          description: Статус заказа
          enum:
            - pending
            - processing
            - shipped
            - delivered
            - canceled
    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    Error:
        type: object
        required:
          - code
          - message
        properties:
          code:
            type: integer
          message:
            type: string